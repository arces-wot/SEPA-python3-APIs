{
	"parameters":
	{
		"host":"wot.arces.unibo.it",
		"ports":
		{
			"http":8000,
			"https":8443,
			"ws":9000,
			"wss":9443
		},
		"paths":
		{
			"query":"/query",
			"update":"/update",
			"subscribe":"/subscribe",
			"register":"/oauth/register",
			"tokenRequest":"/oauth/token",
			"securePath":"/secure"
		}
	},
	"namespaces":
	{
		"wot":"http://wot.arces.unibo.it/sepa#",
		"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
		"dul":"http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#",
		"ire":"http://w3c.github.io/wot/w3c-wot-td-ire.owl#",
		"rdfs":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
		"td":"http://www.w3.org/ns/td#",
		"xsd":"http://www.w3.org/2001/XMLSchema"
	},
	"updates":
	{
		"TD_INIT":
		{
			"sparql":"DELETE {?thing wot:isDiscoverable ?discoverable . ?thing td:hasName ?oldName . ?thing wot:hasComponent ?component. ?component rdf:type td:Thing . ?thing td:hasProperty ?property. ?property td:hasName ?pName. ?property td:hasStability ?pStability. ?property td:isWritable ?pWrite. ?pValueType rdf:type ?pDataType . ?pValueType dul:hasDataValue ?pDataValue . ?thing td:hasEvent ?event. ?event td:hasName ?eName. ?event td:forProperty ?eProperty . ?thing td:hasAction ?action. ?action td:hasName ?aName. ?action wot:isAccessibleBy ?aProtocol. ?action td:forProperty ?aProperty} INSERT {?thing rdf:type td:Thing . ?thing td:hasName ?name. ?thing wot:isDiscoverable 'true'} WHERE { OPTIONAL {?thing rdf:type td:Thing. ?thing wot:isDiscoverable ?discoverable . ?thing td:hasName ?oldName} . OPTIONAL {?thing wot:hasComponent ?component. ?component rdf:type td:Thing} . OPTIONAL {?thing td:hasProperty ?property. ?property td:hasName ?pName. ?property td:hasStability ?pStability. ?property td:isWritable ?pWrite. ?pValueType rdf:type ?pDataType . ?pValueType dul:hasDataValue ?pDataValue} . OPTIONAL {?thing td:hasEvent ?event. ?event td:hasName ?eName. OPTIONAL {?event td:forProperty ?eProperty}} . OPTIONAL {?thing td:hasAction ?action. ?action td:hasName ?aName. ?action wot:isAccessibleBy ?aProtocol. OPTIONAL {?action td:forProperty ?aProperty}} }",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"TD_ADD_PROPERTY":
		{
			"sparql":" DELETE { ?thing td:hasProperty ?property . ?property rdf:type td:Property . ?property td:hasStability ?oldStability. ?property dul:hasDataValue ?oldValue . ?property td:hasName ?oldName . ?property td:isWritable ?oldWritable . ?property td:hasValueType ?oldDataType } INSERT {?thing td:hasProperty ?property . ?property rdf:type td:Property . ?property td:hasName ?name. ?property td:hasStability ?stability. ?property td:isWritable ?writable. ?property td:hasValueType ?dataType . ?property dul:hasDataValue ?value} WHERE {?thing rdf:type td:Thing . OPTIONAL { ?thing td:hasProperty ?property . ?property rdf:type td:Property . ?property td:hasStability ?oldStability. ?property dul:hasDataValue ?oldValue . ?property td:hasName ?oldName . ?property td:isWritable ?oldWritable . ?property td:hasValueType ?oldDataType}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"dataType":
				{
					"type":"uri",
					"value":""
				},
				"property":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				},
				"stability":
				{
					"type":"literal",
					"value":""
				},
				"writable":
				{
					"type":"literal",
					"value":""
				},
				"value":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"TD_ADD_ACTION":
		{
			"sparql":" DELETE {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?oldName . ?action wot:isAccessibleBy ?protocol} INSERT {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?name . ?action wot:isAccessibleBy ?protocol} WHERE {?thing rdf:type td:Thing . OPTIONAL {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?oldName . ?action wot:isAccessibleBy ?protocol}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"action":
				{
					"type":"uri",
					"value":""
				},
				"protocol":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"TD_ADD_ACTION_WITH_INPUT":
		{
			"sparql":"DELETE {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?oldName. ?action td:hasInput ?oldInput . ?oldInput rdf:type wot:ActionInput . ?oldInput td:hasDataType ?oldDataType . ?action wot:isAccessibleBy ?protocol} INSERT {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?name. ?action td:hasInput ?input . ?input rdf:type wot:ActionInput . ?input td:hasDataType ?dataType . ?action wot:isAccessibleBy ?protocol} WHERE { ?thing rdf:type td:Thing . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Input_',STRUUID())) AS ?input) . OPTIONAL {?thing td:hasAction ?action. ?action rdf:type td:Action. ?action td:hasName ?oldName. ?action td:hasInput ?oldInput . ?oldInput rdf:type wot:ActionInput . ?oldInput td:hasDataType ?oldDataType . ?action wot:isAccessibleBy ?protocol}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"action":
				{
					"type":"uri",
					"value":""
				},
				"dataType":
				{
					"type":"uri",
					"value":""
				},
				"protocol":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"TD_ADD_EVENT":
		{
			"sparql":" DELETE {?event td:hasName ?oldName} INSERT {?thing td:hasEvent ?event. ?event rdf:type td:Event. ?event td:hasName ?name } WHERE {?thing rdf:type td:Thing . OPTIONAL{?thing td:hasEvent ?event. ?event rdf:type td:Event. ?event td:hasName ?oldName}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"event":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"TD_ADD_EVENT_WITH_OUTPUT":
		{
			"sparql":" DELETE {?thing td:hasEvent ?event. ?event rdf:type td:Event. ?event td:hasName ?oldName . ?event td:hasDataType ?oldDataType } INSERT {?thing td:hasEvent ?event. ?event rdf:type td:Event. ?event td:hasName ?name . ?event td:hasDataType ?dataType } WHERE {?thing rdf:type td:Thing . OPTIONAL{?thing td:hasEvent ?event. ?event rdf:type td:Event. ?event td:hasName ?oldName . ?event td:hasDataType ?oldDataType }}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"event":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				},
				"dataType":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"TD_ADD_PROPERTY_CHANGED_EVENT":
		{
			"sparql":" DELETE {?thing td:hasEvent ?event. ?event rdf:type td:PropertyChangedEvent. ?event td:hasName ?oldName . ?event td:hasDataType ?oldDataType } INSERT {?thing td:hasEvent ?event. ?event rdf:type td:Event . ?event rdf:type td:PropertyChangedEvent. ?event td:hasName ?name . ?event td:hasDataType ?dataType } WHERE {?thing rdf:type td:Thing . OPTIONAL{?thing td:hasEvent ?event. ?event rdf:type td:PropertyChangedEvent. ?event td:hasName ?oldName . ?event td:hasDataType ?oldDataType }}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"event":
				{
					"type":"uri",
					"value":""
				},
				"name":
				{
					"type":"literal",
					"value":""
				},
				"dataType":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"TD_APPEND_ACCESS_PROTOCOL_TO_ACTION":
		{
			"sparql":" INSERT {?action wot:isAccessibleBy ?protocol} WHERE {?action rdf:type td:Action. ?protocol rdf:type wot:Protocol}",
			"forcedBindings":
			{
				"action":
				{
					"type":"uri",
					"value":""
				},
				"protocol":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"TD_APPEND_TARGET_PROPERTY_TO_ACTION_OR_EVENT":
		{
			"sparql":"INSERT {?action_OR_event td:forProperty ?property} WHERE { {{?action_OR_event rdf:type td:Action} UNION {?action_OR_event rdf:type td:Event}}. ?property rdf:type td:Property}",
			"forcedBindings":
			{
				"action_OR_event":
				{
					"type":"uri",
					"value":""
				},
				"property":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"POST_EVENT_WITH_OUTPUT":
		{
			"sparql":" DELETE { ?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp. ?oldInstance td:hasOutput ?eOldOutput. ?eOldOutput dul:hasDataValue ?oldValue} INSERT { ?event wot:hasInstance ?newInstance. ?newInstance rdf:type wot:EventInstance. ?newInstance wot:isGeneratedBy ?thing . ?newInstance wot:hasTimeStamp ?time . ?newInstance td:hasOutput ?eNewOutput. ?eNewOutput dul:hasDataValue ?value} WHERE {?event rdf:type td:Event . BIND(now() AS ?time) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Event_',STRUUID())) AS ?newInstance) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Output_',STRUUID())) AS ?eNewOutput) . OPTIONAL {?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp. ?oldInstance td:hasOutput ?eOldOutput. ?eOldOutput dul:hasDataValue ?oldValue}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"event":
				{
					"type":"uri",
					"value":""
				},
				"value":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"POST_EVENT_FOR_PROPERTY_CHANGED":
		{
			"sparql":" DELETE { ?event wot:hasInstance ?oldInstance . ?oldInstance rdf:type wot:EventInstance . ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp . ?oldInstance td:hasOutput ?eOldOutput . ?eOldOutput dul:hasDataValue ?oldValue . ?property dul:hasValueType ?oldValue } INSERT { ?event wot:hasInstance ?newInstance . ?newInstance rdf:type wot:EventInstance . ?newInstance wot:isGeneratedBy ?thing . ?newInstance wot:hasTimeStamp ?time . ?newInstance td:hasOutput ?eNewOutput . ?eNewOutput dul:hasDataValue ?value . ?property dul:hasDataValue ?value } WHERE { ?event rdf:type td:Event . ?event td:forProperty ?property . ?property rdf:type td:Property . BIND(now() AS ?time) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Event_',STRUUID())) AS ?newInstance) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Output_',STRUUID())) AS ?eNewOutput) . OPTIONAL { ?event wot:hasInstance ?oldInstance . ?oldInstance rdf:type wot:EventInstance . ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp . ?oldInstance td:hasOutput ?eOldOutput . ?eOldOutput dul:hasDataValue ?oldValue ?property dul:hasDataValue ?oldValue }}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				},
				"event":
				{
					"type":"uri",
					"value":""
				},
				"value":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"POST_EVENT":
		{
			"sparql":" DELETE { ?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp} INSERT {?event wot:hasInstance ?newInstance. ?newInstance wot:isGeneratedBy ?thing . ?newInstance rdf:type wot:EventInstance. ?newInstance wot:hasTimeStamp ?time} WHERE { ?event rdf:type td:Event. BIND(now() AS ?time) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Event_',STRUUID())) AS ?newInstance) . OPTIONAL {?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:isGeneratedBy ?thing . ?oldInstance wot:hasTimeStamp ?eOldTimeStamp}}",
			"forcedBindings":
			{
				"event":
				{
					"type":"uri",
					"value":""
				},
				"thing":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"POST_ACTION_WITH_INPUT":
		{
			"sparql":" DELETE {?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp. ?oldInstance td:hasInput ?oldInput. ?oldInput dul:hasDataValue ?oldValue} INSERT {?action wot:hasInstance ?newInstance. ?newInstance rdf:type wot:ActionInstance. ?newInstance wot:hasTimeStamp ?time. ?newInstance td:hasInput ?newInput. ?newInput dul:hasDataValue ?value} WHERE {?action rdf:type td:Action . ?thing td:hasAction ?action . ?thing wot:isDiscoverable 'true' . BIND(now() AS ?time) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#Action_',STRUUID())) AS ?newInstance) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#ActionInput_',STRUUID())) AS ?newInput) . OPTIONAL{?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp. ?oldInstance td:hasInput ?oldInput. ?oldInput dul:hasDataValue ?oldValue}}",
			"forcedBindings":
			{
				"action":
				{
					"type":"uri",
					"value":""
				},
				"value":
				{
					"type":"literal",
					"value":""
				}
			}
		},
		"POST_ACTION":
		{
			"sparql":" DELETE {?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp} INSERT {?action wot:hasInstance ?newInstance. ?newInstance rdf:type wot:ActionInstance. ?newInstance wot:hasTimeStamp ?time} WHERE {?action rdf:type td:Action . ?thing td:hasAction ?action . ?thing wot:isDiscoverable 'true' . BIND(now() AS ?time) . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#ActionInstance_',STRUUID())) AS ?newInstance) . OPTIONAL{?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp}}",
			"forcedBindings":
			{
				"action":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"UPDATE_PROPERTY_VALUE":
		{
			"sparql":" DELETE { ?property dul:hasDataValue ?oldValue} INSERT { ?property dul:hasDataValue ?value} WHERE { ?property rdf:type td:Property. ?property td:isWritable 'true'. ?property dul:hasDataValue ?oldValue }",
			"forcedBindings":
			{
				"value":
				{
					"type":"literal",
					"value":""
				},
				"property":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"UPDATE_ACTION_OUTPUT_VALUE":
		{
			"sparql":" DELETE { ?instance td:hasOutput ?oldOutput . ?oldOutput rdf:type wot:ActionOutput . ?oldOutput dul:hasDataValue ?value } INSERT { ?instance td:hasOutput ?output. ?output rdf:type wot:ActionOutput . ?output dul:hasDataValue ?value } WHERE { ?action wot:hasInstance ?instance . ?instance rdf:type wot:ActionInstance . BIND(IRI(concat('http://wot.arces.unibo.it/sepa#ActionOutput_',STRUUID())) AS ?output) . OPTIONAL {?instance td:hasOutput ?oldOutput . ?oldOutput rdf:type wot:ActionOutput . ?oldOutput dul:hasDataValue ?value }}",
			"forcedBindings":
			{
				"value":
				{
					"type":"literal",
					"value":""
				},
				"action":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		 "UPDATE_DISCOVER" :
    {
      "sparql" : " DELETE { ?thing wot:isDiscoverable ?oldValue } INSERT {  ?thing wot:isDiscoverable ?value } WHERE {?thing wot:isDiscoverable ?oldValue}",
      "forcedBindings":
      {
        "value":
        {
          "type":"literal",
          "value":""
        },
        "thing":
        {
          "type":"uri",
          "value":""
        }
      }
    }
	},
	"queries":
	{
		"ALL_THINGS":
		{
			"sparql":"SELECT ?thing ?name ?discoverable WHERE { ?thing rdf:type td:Thing . ?thing td:hasName ?name . ?thing wot:isDiscoverable ?discoverable }"
		},
		"THING_DESCRIPTION":
		{
			"sparql":" SELECT ?name ?discoverable ?component ?property ?pName ?pStability ?pWrite ?pDataType ?pDataValue ?event ?eName ?eProperty ?action ?aName ?aProtocol ?aProperty WHERE { ?thing rdf:type td:Thing. ?thing wot:isDiscoverable ?discoverable . ?thing td:hasName ?name . OPTIONAL {?thing wot:hasComponent ?component. ?component rdf:type td:Thing} . OPTIONAL {?thing td:hasProperty ?property. ?property td:hasName ?pName. ?property td:hasStability ?pStability. ?property td:isWritable ?pWrite. ?pValueType rdf:type ?pDataType . ?pValueType dul:hasDataValue ?pDataValue} . OPTIONAL {?thing td:hasEvent ?event. ?event td:hasName ?eName. OPTIONAL {?event td:forProperty ?eProperty}} . OPTIONAL {?thing td:hasAction ?action. ?action td:hasName ?aName. ?action wot:isAccessibleBy ?aProtocol. OPTIONAL {?action td:forProperty ?aProperty}}}",
			"forcedBindings":
			{
				"thing":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"ACTION":
		{
			"sparql":" SELECT ?value ?timeStamp WHERE {?action rdf:type td:Action. ?action wot:hasInstance ?instance. ?instance wot:hasTimeStamp ?timeStamp . OPTIONAL {?instance td:hasInput ?input. ?input dul:hasDataValue ?value}}",
			"forcedBindings":
			{
				"action":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"ACTION_OUTPUT_VALUE":
		{
			"sparql":" SELECT ?value WHERE {?action rdf:type td:Action. ?action wot:hasInstance ?instance . ?instance td:hasOutput ?aOutput. ?aOutput dul:hasDataValue ?value}",
			"forcedBindings":
			{
				"action":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"EVENT":
		{
			"sparql":"SELECT ?thing ?timeStamp ?value WHERE { ?event rdf:type td:Event. ?event wot:hasInstance ?instance. ?instance wot:isGeneratedBy ?thing. ?instance wot:hasTimeStamp ?timeStamp. OPTIONAL {?instance td:hasOutput ?output. ?output dul:hasDataValue ?value}}",
			"forcedBindings":
			{
				"event":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"THING_EVENT":
		{
			"sparql":"SELECT ?timeStamp ?value WHERE {?event rdf:type td:Event. ?event wot:hasInstance ?instance. ?instance wot:isGeneratedBy ?thing. ?instance wot:hasTimeStamp ?timeStamp. OPTIONAL {?instance td:hasOutput ?output. ?output dul:hasDataValue ?value}}",
			"forcedBindings":
			{
				"event":
				{
					"type":"uri",
					"value":""
				},
				"thing":
				{
					"type":"uri",
					"value":""
				}
			}
		},
		"ALL_EVENTS":
		{
			"sparql":" SELECT ?thing ?event ?eName WHERE { ?thing rdf:type td:Thing. ?thing td:hasEvent ?event. ?event td:hasName ?eName}",
			"forcedBindings":
			{
				
			}
		},
		"ALL_ACTIONS":
		{
			"sparql":"SELECT ?thing ?action ?aName WHERE { ?thing rdf:type td:Thing . ?thing td:hasAction ?action. ?action td:hasName ?aName}",
			"forcedBindings":
			{
				
			}
		},
		"ALL_PROPERTIES":
		{
			"sparql":"SELECT ?thing ?property ?pName WHERE { ?thing rdf:type td:Thing. ?thing td:hasProperty ?property. ?property td:hasName ?pName}",
			"forcedBindings":
			{
				
			}
		}
	}
}